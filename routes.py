from app import app, bot
from flask import request, abort
from config import WELCOME_MESSAGE
import telebot
from telebot import types
import tools
from app import logs
from database import db, User, Favorite
from peewee import DoesNotExist, IntegrityError
import time

# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
message_list = {}


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
@app.route("/", methods=["POST"])
def get_updates():
	if request.headers.get('content-type') == 'application/json':
		json_string = request.get_data().decode('utf-8')
		update = types.Update.de_json(json_string)
		bot.process_new_updates([update])
		return 'ok'
	else:
		abort(403)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º
@bot.message_handler(commands=["start"])
def send_welcome(message):
	logs.add_log("/start executed")
	if message.text == "/start":
		tg_id = message.from_user.id
		logs.add_log("Check user exist")
		# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
		if not User.select().where(User.telegram_id == tg_id):
			logs.add_log("Couldn't find user in the db")
			new_user = User(username=message.from_user.username,
			                telegram_id=tg_id)
			logs.add_log(f"{new_user} created")
			new_user.save()
			logs.add_log("New user saved")
		else:
			logs.add_log("User already exist")
			tkeyboard = tools.generate_keyboard()
			bot.reply_to(message,
						WELCOME_MESSAGE,
						parse_mode="markdown",
						reply_markup=tkeyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_handler(message):
	# –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	user = User.get(User.telegram_id == message.from_user.id)
	# –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Ç–æ –∏–≥–Ω–æ—Ä–∏–º
	if user.warns == 3:
		logs.add_log(f"{user} blocked and trying to send a message to the bot")
		return
	# –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–º
	try:
		# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—â–µ 1 –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥—É, —Ç–æ –≤—ã–¥–∞–µ–º –≤–∞—Ä–Ω
		if time.time() - message_list[
		    message.from_user.id]["last_message"] < 1 and not user.is_admin():
			user.warns += 1
			user.save()
			logs.add_log(f"Add warn to {user}")
			bot.send_message(
			    message.from_user.id,
			    f"–í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —Å–ø–∞–º.\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user.warns}"
			)
			if user.warns == 3:
				bot.send_message(
				    message.from_user.id,
				    "–í—ã –±—ã–ª–∏ *–∑–∞–±–∞–Ω–µ–Ω—ã* –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n–ö–æ–Ω—Ç–∞–∫—Ç—ã: @fdnflm",
				    parse_mode="markdown")
			return
		else:
			# –µ—Å–ª–∏ –Ω–µ —Å–ø–∞–º, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å
			message_list[message.from_user.id] = {"last_message": time.time()}
	except KeyError:
		# –µ—Å–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á
		message_list[message.from_user.id] = {"last_message": time.time()}
		logs.add_error(f"{user} doesn't have last_message dict")
	if message.text == "üìù –°—Ç–∞—Ç—å–∏" or message.text == "‚¨ÖÔ∏è –ö —Å—Ç–∞—Ç—å—è–º":
		tkeyboard = tools.generate_keyboard("articles")
		bot.send_message(message.from_user.id,
		                 "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
		                 reply_markup=tkeyboard)
	elif message.text == "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
		# –ø–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –ë–î
		posts = Favorite.select().where(Favorite.user_id == user.id)
		completed_message = ""
		# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
		if len(posts) == 0:
			completed_message = "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π üôÅ"
			bot.send_message(message.from_user.id, completed_message)
		else:
			# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
			completed_message = "*–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
			completed_message += "\n\n".join(
			    f"{i+1}. [{posts[i].title}]({posts[i].liked_url})"
			    for i in range(len(posts)))
			# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
			tkeyboard = tools.generate_keyboard("delete_element")
			bot.send_message(message.from_user.id,
			                 completed_message,
			                 parse_mode="markdown",
			                 reply_markup=tkeyboard,
			                 disable_web_page_preview=True)
	# –õ—É—á—à–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
	elif message.text == "üìà –õ—É—á—à–∏–µ —Å—Ç–∞—Ç—å–∏":
		tkeyboard = tools.generate_keyboard("date")
		bot.send_message(message.from_user.id,
		                 "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
		                 reply_markup=tkeyboard)
	# –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	elif message.text == "üü¢ –°—É—Ç–∫–∏":
		bot.send_message(message.from_user.id,
		                 tools.generate_posts("day"),
		                 parse_mode="markdown")
	elif message.text == "üîµ –ù–µ–¥–µ–ª—è":
		bot.send_message(message.from_user.id,
		                 tools.generate_posts("week"),
		                 parse_mode="markdown")
	elif message.text == "üü£ –ú–µ—Å—è—Ü":
		bot.send_message(message.from_user.id,
		                 tools.generate_posts("month"),
		                 parse_mode="markdown")
	# –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	elif message.text == "–í—Å–µ –ø–æ–¥—Ä—è–¥":
		#tkeyboard = tools.generate_keyboard("pages")
		bot.send_message(message.from_user.id,
		                 tools.generate_posts("all"),
		                 parse_mode="markdown")
	elif message.text == "‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é":
		tkeyboard = tools.generate_keyboard()
		bot.reply_to(message,
		             "–ì–ª–∞–≤–Ω–∞—è",
		             parse_mode="markdown",
		             reply_markup=tkeyboard)
	# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
	elif message.text.startswith("/read"):
		# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ
		if (user.status == 0 and user.requests <= 150) or user.status == 1:
			user.requests += 1
			user.save()
			# –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞
			link = tools.get_link(message)
			tkeyboard = None
			favorite = Favorite.select().where(
			    Favorite.liked_url == link.split("\n\n")[1])
			if len(favorite) == 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
				tkeyboard = tools.generate_keyboard("favorite")
			else:
				tkeyboard = tools.generate_keyboard("unfavorite")
			bot.send_message(message.from_user.id,
			                 link,
			                 reply_markup=tkeyboard,
			                 parse_mode="markdown")
		else:
			bot.send_message(
			    message.from_user.id,
			    "–õ–∏–º–∏—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥–µ–Ω—å –ø—Ä–µ–≤—ã—à–µ–Ω—ã. –ñ–¥—ë–º –≤–∞—Å –∑–∞–≤—Ç—Ä–∞! :)")


# —Å–ª–µ–¥—É—é—à–∏–π —à–∞–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
# —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ next_step_handler()
def get_element(message):
	tkeyboard = tools.generate_keyboard()
	# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—à–∏–±—Å—è, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
	if message.text == "/cancel":
		bot.send_message(message.from_user.id,
		                 "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
		                 reply_markup=tkeyboard)
		return
	# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user = None
	try:
		index = int(message.text)
		user = User.get(User.telegram_id == message.from_user.id)
		# –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–æ–∫
		favorites = Favorite.select().where(Favorite.user_id == user.id)
		# –Ω–∞—Ö–æ–¥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ
		# (—Å–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞—á–∏–Ω–∏–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã, –ø–æ—ç—Ç–æ–º—É –æ—Ç–Ω–∏–º–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É)
		like = favorites[index - 1]
		like.delete_instance()  # —É–¥–∞–ª–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ –ë–î
		bot.send_message(message.chat.id, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
		# –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
		posts = Favorite.select().where(Favorite.user_id == User.get(
		    User.telegram_id == message.from_user.id).id)
		completed_message = ""
		if len(posts) == 0:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
			completed_message = "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π üôÅ"
			bot.send_message(message.from_user.id,
			                 completed_message,
			                 reply_markup=tkeyboard)
		else:
			completed_message = "*–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
			completed_message += "\n\n".join(
			    f"{i+1}. [{posts[i].title}]({posts[i].liked_url})"
			    for i in range(len(posts)))
			tkeyboard = tools.generate_keyboard("delete_element")
			bot.send_message(message.from_user.id,
			                 completed_message,
			                 parse_mode="markdown",
			                 reply_markup=tkeyboard,
			                 disable_web_page_preview=True)
	except Exception as e:
		logs.add_exception(e)
		logs.add_error(f"{user} - got an exception")
		bot.send_message(message.from_user.id,
		                 "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
		                 reply_markup=tkeyboard)
		return


# handling callback requests
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
	chat_id = call.message.chat.id
	if call.data == "add_favorite":  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
		# —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		user = User.get(User.telegram_id == chat_id)
		title = call.message.text.split("\n\n")[0]
		url = call.message.text.split("\n\n")[1]
		tkeyboard = tools.generate_keyboard("unfavorite")
		# —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é –≤ –ë–î
		try:
			like = Favorite(user=user, title=title, liked_url=url)
			like.save()
			# —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
			# + –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
			bot.answer_callback_query(call.id,
			                          "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
			                          show_alert=True)
			bot.edit_message_reply_markup(chat_id=chat_id,
			                              message_id=call.message.message_id,
			                              reply_markup=tkeyboard)
		except IntegrityError:
			bot.answer_callback_query(call.id,
			                          "–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
			                          show_alert=True)
			bot.edit_message_reply_markup(chat_id=chat_id,
			                              message_id=call.message.message_id,
			                              reply_markup=tkeyboard)
	elif call.data == "delete_favorite":  # delete favorite article from the db
		user = User.get(User.telegram_id == chat_id)
		tkeyboard = tools.generate_keyboard("favorite")
		# –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
		# —ç—Ç–æ –Ω—É–∂–Ω–æ, –≤ —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
		try:
			like = Favorite.get(
			    Favorite.liked_url == call.message.text.split("\n\n")[1])
			like.delete_instance()
		except DoesNotExist:
			logs.add_error(f"{user} - got an exception DoesNotExist")
			bot.answer_callback_query(
			    call.id,
			    "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
			    show_alert=True)
			bot.edit_message_reply_markup(chat_id=chat_id,
			                              message_id=call.message.message_id,
			                              reply_markup=tkeyboard)
			return
		bot.answer_callback_query(call.id,
		                          "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
		                          show_alert=True)
		bot.edit_message_reply_markup(chat_id=chat_id,
		                              message_id=call.message.message_id,
		                              reply_markup=tkeyboard)
	elif call.data == "delete_element":
		# —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Å –∏–ø—Å–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
		markup = types.ForceReply(selective=False)
		bot.send_message(
		    chat_id,
		    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ",
		    reply_markup=markup)
		bot.register_next_step_handler(call.message, get_element)
	elif call.data == "to_main":
		# –≤–µ—Ä–Ω—É—Ç—å reply keyboard –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ inline –∫–Ω–æ–ø–∫—É
		tkeyboard = tools.generate_keyboard()
		bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–∞—è", reply_markup=tkeyboard)
